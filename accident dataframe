{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPFCMduYD9NjaTVGJlGfOR9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nyawiramwai/internet/blob/main/accident%20dataframe\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BNaKImehDh2v",
        "outputId": "ccd26d83-9b2c-43c0-d78b-52ae8caa3fa4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Speed  Weather  Road_Condition  Time_of_Day  Vehicle_Type  Driver_Age  \\\n",
            "0     60        1               1           14             2          25   \n",
            "1     80        2               1           18             1          30   \n",
            "2     45        1               2           10             2          22   \n",
            "3     90        3               1           20             2          35   \n",
            "4    100        2               2           22             1          28   \n",
            "\n",
            "   Accident_Severity  \n",
            "0                  2  \n",
            "1                  3  \n",
            "2                  1  \n",
            "3                  3  \n",
            "4                  3  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Load dataset\n",
        "data = pd.read_csv('/content/road_accident_data - Copy.csv')\n",
        "\n",
        "# Display first few rows\n",
        "print(data.head())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for missing values\n",
        "print(data.isnull().sum())\n",
        "\n",
        "# Dropping rows with missing target values (severity)\n",
        "data = data.dropna(subset=['Accident_Severity'])\n",
        "\n",
        "# Filling or dropping missing values for features (independent variables)\n",
        "data.fillna(0, inplace=True)\n",
        "\n",
        "# Convert categorical variables (e.g., road type, weather) to numeric using one-hot encoding\n",
        "data = pd.get_dummies(data, columns=['Weather', 'Road_Condition','Vehicle_Type'], drop_first=True)\n",
        "\n",
        "# Display cleaned data\n",
        "print(data.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ret9b26RDjNq",
        "outputId": "f8ef0c0b-712c-47c6-fd81-c6b2d111e486"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Speed                0\n",
            "Weather              0\n",
            "Road_Condition       0\n",
            "Time_of_Day          0\n",
            "Vehicle_Type         0\n",
            "Driver_Age           0\n",
            "Accident_Severity    0\n",
            "dtype: int64\n",
            "   Speed  Time_of_Day  Driver_Age  Accident_Severity  Weather_2  Weather_3  \\\n",
            "0     60           14          25                  2      False      False   \n",
            "1     80           18          30                  3       True      False   \n",
            "2     45           10          22                  1      False      False   \n",
            "3     90           20          35                  3      False       True   \n",
            "4    100           22          28                  3       True      False   \n",
            "\n",
            "   Road_Condition_2  Vehicle_Type_2  \n",
            "0             False            True  \n",
            "1             False           False  \n",
            "2              True            True  \n",
            "3             False            True  \n",
            "4              True           False  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Dependent variable\n",
        "Y = data['Accident_Severity']\n",
        "X = data.drop(columns=['Accident_Severity'])\n",
        "\n",
        "X_array = X.to_numpy()\n",
        "Y_array = Y.to_numpy()\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Dependent variable\n",
        "Y = data['Accident_Severity']\n",
        "X = data.drop(columns=['Accident_Severity'])\n",
        "\n",
        "X_array = X.to_numpy()\n",
        "Y_array = Y.to_numpy()\n",
        "# Splitting the dataset into training and testing sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "lzrLIDf8DoLh"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Initialize and train the model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, Y_train)\n",
        "\n",
        "# Make predictions\n",
        "Y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(Y_test, Y_pred)\n",
        "r2 = r2_score(Y_test, Y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_GIQaOnvD01j",
        "outputId": "129cf457-e7de-42da-8cf2-5e49c84d20ca"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 15.39546479065606\n",
            "R-squared: -60.58185916262424\n"
          ]
        }
      ]
    }
  ]
}